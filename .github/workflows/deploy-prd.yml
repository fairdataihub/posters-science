# GitHub Actions workflow for deploying the application to production environment
# This workflow handles both UI deployment and database migrations
name: Deploy to production environment

# Concurrency control to prevent multiple deployments running simultaneously
# If a new deployment is triggered while one is running, the previous one will be cancelled
concurrency:
  group: production-app-deploy
  cancel-in-progress: true

# Trigger conditions for this workflow
on:
  # push:
  #   branches:
  #     - main # Deploy on every push to main branch
  workflow_dispatch: # Allow manual triggering from GitHub UI

jobs:
  # Job for deploying the UI/frontend application
  deploy-ui:
    runs-on: ubuntu-latest
    environment: prd # Uses production environment secrets

    # Environment variables for Kamal deployment and container registry
    env:
      DOCKER_BUILDKIT: 1 # Enable Docker BuildKit for faster builds
      KAMAL_REGISTRY_LOGIN_SERVER: ${{ secrets.KAMAL_REGISTRY_LOGIN_SERVER }}
      KAMAL_REGISTRY_USERNAME: ${{ secrets.KAMAL_REGISTRY_USERNAME }}
      KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
      KAMAL_SERVER_IP: ${{ secrets.KAMAL_SERVER_IP }}
      KAMAL_APP_DOMAIN: ${{ secrets.KAMAL_APP_DOMAIN }}
      KAMAL_APP_NAME: ${{ secrets.KAMAL_APP_NAME }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NUXT_SESSION_PASSWORD: ${{ secrets.NUXT_SESSION_PASSWORD }}

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v4

      # Step 2: Setup Ruby environment for Kamal deployment tool
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.1
          bundler-cache: true # Cache Ruby dependencies for faster builds

      # Step 3: Install Kamal deployment tool
      - run: gem install kamal

      # Step 4: Setup SSH agent for server access
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 5: Authenticate with Azure Container Registry
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.KAMAL_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.KAMAL_REGISTRY_USERNAME }}
          password: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}

      # Step 6: Setup Docker Buildx for better caching and performance
      - name: Set up Docker Buildx for cache
        uses: docker/setup-buildx-action@v3

      # Step 7: Verify Kamal installation
      - run: kamal version

      # Step 8: Release any existing deployment locks
      # This prevents conflicts when redeploying while a previous deployment is running
      - run: kamal lock release
      # Uncomment for verbose output during troubleshooting:
      # - run: kamal lock release --verbose

      # Step 9: Initial Kamal setup (only needed once per server)
      # Note: This step might need to be run manually on the server first time
      # to add the user to the docker group: `sudo usermod -aG docker $USER | newgrp docker | docker ps`
      - run: kamal setup

  # Job for running database migrations
  # migrate-db:
  #   runs-on: ubuntu-latest
  #   environment: prd  # Uses production environment secrets
  #   defaults:
  #     run:
  #       working-directory: ui  # All commands run from the ui directory
  #   env:
  #     DATABASE_URL: ${{ secrets.DATABASE_URL }}

  #   steps:
  #     # Step 1: Checkout the repository code
  #     - uses: actions/checkout@v3

  #     # Step 2: Setup Node.js environment for Prisma operations
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 20

  #     # Step 3: Install Node.js dependencies
  #     - run: yarn install

  #     # Step 4: Generate Prisma client for database operations
  #     - run: yarn prisma:generate

  #     # Step 5: Deploy database migrations to production
  #     # Redirects output to /dev/null to reduce log noise
  #     - run: yarn prisma:migrate:deploy > /dev/null
